<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Simulador Sistema Solar — 2D + 3D (corregido)</title>
  <style>
    :root{ --bg:#05071a; --panel:#0b1226; --accent:#4fb0ff; --muted:#9aa9c7 }
    html,body{height:100%;margin:0;font-family:Inter,system-ui,Arial,sans-serif;background:linear-gradient(180deg,#000814 0%,var(--bg) 70%);color:#e6f0ff}
    .app{display:grid;grid-template-columns:1fr 340px;gap:16px;height:100vh;padding:18px}
    .stage{position:relative;border-radius:12px;overflow:hidden;background:radial-gradient(circle at 20% 10%, rgba(79,176,255,0.03), transparent 10%), transparent;box-shadow:0 8px 30px rgba(2,6,23,0.6)}
    canvas{width:100%;height:100%;display:block}
    .sidebar{background:var(--panel);border-radius:12px;padding:14px;display:flex;flex-direction:column;gap:12px}
    h1{font-size:16px;margin:0 0 6px 0}
    .controls{display:flex;gap:8px;align-items:center}
    button{background:transparent;border:1px solid rgba(255,255,255,0.06);padding:8px 10px;border-radius:8px;color:var(--accent);cursor:pointer}
    .slider{width:100%}
    .info{background:rgba(255,255,255,0.02);padding:10px;border-radius:8px;flex:1;overflow:auto}
    .planet-list{display:flex;flex-wrap:wrap;gap:6px}
    .planet-chip{padding:6px 8px;border-radius:999px;background:rgba(255,255,255,0.02);cursor:pointer;border:1px solid rgba(255,255,255,0.02)}
    .footer{font-size:12px;color:var(--muted)}
    #threeContainer{position:absolute;inset:0;pointer-events:none}
    .show-3d { pointer-events:auto; }
    .backBtn{position:absolute;left:18px;top:18px;z-index:30}
    .loader{position:absolute;right:18px;top:18px;padding:8px 10px;background:rgba(0,0,0,0.4);border-radius:8px;display:none}
    @media(max-width:900px){.app{grid-template-columns:1fr} .sidebar{height:360px;position:relative}}
  </style>
</head>
<body>
  <div class="app">
    <div class="stage" id="stage">
      <canvas id="space2d"></canvas>
      <!-- Three.js overlay container (hidden until 3D mode) -->
      <div id="threeContainer" style="display:none"></div>

      <div id="hud" style="position:absolute;right:14px;top:14px;color:#cfe9ff;background:rgba(3,8,20,0.4);padding:8px 10px;border-radius:8px;font-size:13px">Planeta: <span id="hud-planet">Sol</span></div>
      <button id="back3d" class="backBtn" style="display:none">⬅ Volver</button>
      <div id="loader" class="loader">Cargando texturas…</div>
    </div>

    <aside class="sidebar">
      <div>
        <h1>Controles</h1>
        <div class="controls">
          <button id="playBtn">▶️ Reproducir</button>
          <button id="pauseBtn">⏸ Pausar</button>
          <button id="resetBtn">⤺ Reestablecer</button>
        </div>
        <div style="margin-top:8px">Velocidad de simulación</div>
        <input id="speed" class="slider" type="range" min="0" max="5" step="0.01" value="1">
      </div>

      <div>
        <h1>Selecciona planeta</h1>
        <div class="planet-list" id="planetList"></div>
      </div>

      <div class="info" id="info">
        <strong>Información</strong>
        <p id="infoText">Haz clic en un planeta (en la lista o en el lienzo) para ver su modelo 3D realista con textura y una transición animada.</p>
      </div>

      <div class="footer">Versión: 2D + 3D — Texturas remotas. Guarda como <code>simulador_3d_planetas.html</code> y ábrelo en tu navegador.</div>
    </aside>
  </div>

  <!-- Usar build UMD de three.js (más robusto al abrir como archivo local). -->
  <script src="https://cdn.jsdelivr.net/npm/three@0.165.0/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.165.0/examples/js/controls/OrbitControls.js"></script>

  <script>
    // ----------------------------------------
    // NOTA IMPORTANTE (por qué "no funcionaba")
    // Si abrías el archivo con <file://> y usabas imports ES modules (type="module") era
    // muy probable que el navegador bloqueara los módulos o que las rutas fallaran.
    // He cambiado a la versión UMD (global THREE) para que funcione al abrir localmente.
    // ----------------------------------------

    // Referencias DOM
    const stage = document.getElementById('stage');
    const canvas2d = document.getElementById('space2d');
    const threeContainer = document.getElementById('threeContainer');
    const loaderEl = document.getElementById('loader');

    // ---------- 2D Canvas ----------
    const ctx = canvas2d.getContext('2d');
    let w=0,h=0,cx=0,cy=0;
    function resize2d(){
      const dpr = window.devicePixelRatio || 1;
      w = canvas2d.clientWidth; h = canvas2d.clientHeight;
      canvas2d.width = Math.floor(w * dpr);
      canvas2d.height = Math.floor(h * dpr);
      ctx.setTransform(dpr,0,0,dpr,0,0);
      cx = w/2; cy = h/2;
    }
    window.addEventListener('resize', resize2d);

    const planets = [
      {name:'Sol', color:'#ffd27f', radius:30, distance:0, period:0, desc:'Estrella central del sistema solar.'},
      {name:'Mercurio', color:'#bdbdbd', radius:4, distance:70, period:0.24, desc:'Planeta más cercano al Sol.'},
      {name:'Venus', color:'#f5c27f', radius:6, distance:100, period:0.62, desc:'Segundo planeta, atmósfera densa.'},
      {name:'Tierra', color:'#5fb0ff', radius:7, distance:140, period:1, desc:'Nuestro planeta — hogar de vida conocida.'},
      {name:'Marte', color:'#ff7b5c', radius:5, distance:180, period:1.88, desc:'Planeta rojo, objetivo de muchas misiones.'},
      {name:'Júpiter', color:'#d9a66a', radius:14, distance:260, period:11.86, desc:'Gigante gaseoso, con numerosas lunas.'},
      {name:'Saturno', color:'#e7d59a', radius:12, distance:340, period:29.45, desc:'Famoso por sus anillos.'},
      {name:'Urano', color:'#9fe0e6', radius:9, distance:420, period:84, desc:'Gigante helado, eje inclinado.'},
      {name:'Neptuno', color:'#6aa6ff', radius:9, distance:480, period:164.8, desc:'Gigante helado exterior.'}
    ];

    let running=true, simSpeed=1, time=0, focus=planets[0];
    document.getElementById('hud-planet').textContent = focus.name;

    // lista de planetas en UI
    const planetList = document.getElementById('planetList');
    planets.forEach((p,i)=>{
      const chip = document.createElement('div');
      chip.className = 'planet-chip'; chip.textContent = p.name;
      chip.onclick = ()=>{ onPlanetSelect(p); };
      planetList.appendChild(chip);
    });

    function showInfo(p){ document.getElementById('infoText').innerHTML = `<strong>${p.name}</strong> — ${p.desc}<br>Radio visual: ${p.radius}px<br>Distancia visual: ${p.distance}px<br>Periodo (años): ${p.period}`; }

    document.getElementById('playBtn').addEventListener('click', ()=> running=true);
    document.getElementById('pauseBtn').addEventListener('click', ()=> running=false);
    document.getElementById('resetBtn').addEventListener('click', ()=> time=0);
    document.getElementById('speed').addEventListener('input', (e)=> simSpeed = parseFloat(e.target.value));

    // 2D camera
    let zoom2d=1, offsetX=0, offsetY=0, dragging=false, lastX=0, lastY=0;
    canvas2d.addEventListener('wheel', e=>{ e.preventDefault(); const delta = -e.deltaY*0.001; zoom2d *= (1+delta); zoom2d = Math.min(Math.max(zoom2d,0.2),4); });
    canvas2d.addEventListener('mousedown', e=>{ dragging=true; lastX=e.clientX; lastY=e.clientY; });
    window.addEventListener('mouseup', ()=> dragging=false);
    window.addEventListener('mousemove', e=>{ if(!dragging) return; offsetX += (e.clientX-lastX); offsetY += (e.clientY-lastY); lastX = e.clientX; lastY = e.clientY; });

    function draw2d(){
      ctx.clearRect(0,0,w,h);
      drawStars();
      ctx.save(); ctx.translate(cx+offsetX, cy+offsetY); ctx.scale(zoom2d, zoom2d);
      planets.forEach((p,i)=>{ if(p.distance===0) return; ctx.beginPath(); ctx.strokeStyle='rgba(255,255,255,0.04)'; ctx.lineWidth=1; ctx.arc(0,0,p.distance,0,Math.PI*2); ctx.stroke(); });
      planets.forEach((p,i)=>{
        const angle = (time / (p.period || 1)) * Math.PI * 2;
        const x = p.distance * Math.cos(angle);
        const y = p.distance * Math.sin(angle) * 0.7;
        ctx.fillStyle = p.color; ctx.beginPath(); ctx.shadowColor=p.color; ctx.shadowBlur = i===0?40:6; ctx.arc(x,y,p.radius,0,Math.PI*2); ctx.fill(); ctx.shadowBlur=0;
      });
      ctx.restore();
    }
    function drawStars(){ const count=120; for(let i=0;i<count;i++){ const sx=(i*9301%w)+(i*7%13); const sy=(i*49297%h)+(i*3%7); const s=(i%5===0)?2:1; ctx.fillStyle='rgba(255,255,255,0.06)'; ctx.fillRect(sx,sy,s,s); } }
    function loop2d(){ if(running) time += 0.002*simSpeed; draw2d(); requestAnimationFrame(loop2d); }
    function init2d(){ resize2d(); window.requestAnimationFrame(loop2d); showInfo(planets[0]); }
    init2d();

    // hit-testing simple
    canvas2d.addEventListener('click', (e)=>{
      const rect = canvas2d.getBoundingClientRect();
      const x = (e.clientX - rect.left) - (cx + offsetX);
      const y = (e.clientY - rect.top) - (cy + offsetY);
      const rx = x / zoom2d, ry = y / zoom2d;
      let picked = null;
      planets.forEach(p=>{
        if(p.distance===0) return;
        const angle = (time / (p.period || 1)) * Math.PI * 2;
        const px = p.distance * Math.cos(angle);
        const py = p.distance * Math.sin(angle) * 0.7;
        const dx = rx - px, dy = ry - py;
        if(Math.sqrt(dx*dx+dy*dy) <= p.radius+4) picked = p;
      });
      if(picked) onPlanetSelect(picked);
    });

    // ---------- 3D (THREE.js UMD) ----------
    let renderer, scene, camera, controls, planetMesh;

    // textura por planeta (puede fallar por CORS; en ese caso se usa color)
    const textureMap = {
      'Mercurio': 'https://www.solarsystemscope.com/textures/download/2k_mercury.jpg',
      'Venus': 'https://www.solarsystemscope.com/textures/download/2k_venus_atmosphere.jpg',
      'Tierra': 'https://www.solarsystemscope.com/textures/download/2k_earth_daymap.jpg',
      'Marte': 'https://www.solarsystemscope.com/textures/download/2k_mars.jpg',
      'Júpiter': 'https://www.solarsystemscope.com/textures/download/2k_jupiter.jpg',
      'Saturno': 'https://www.solarsystemscope.com/textures/download/2k_saturn.jpg',
      'Urano': 'https://www.solarsystemscope.com/textures/download/2k_uranus.jpg',
      'Neptuno': 'https://www.solarsystemscope.com/textures/download/2k_neptune.jpg',
      'Sol': ''
    };

    function loadTextureAsync(url){
      return new Promise((resolve, reject)=>{
        if(!url) return resolve(null);
        const loader = new THREE.TextureLoader();
        loader.crossOrigin = '';
        loader.load(url, tex=>{ try{ tex.encoding = THREE.sRGBEncoding; }catch(e){}; resolve(tex); }, undefined, err=> reject(err));
      });
    }

    function createThreeRenderer(){
      renderer = new THREE.WebGLRenderer({antialias:true,alpha:true});
      renderer.setPixelRatio(window.devicePixelRatio || 1);
      renderer.setSize(stage.clientWidth, stage.clientHeight);
      try{ renderer.outputEncoding = THREE.sRGBEncoding; }catch(e){}
      renderer.domElement.style.display = 'block';
      renderer.domElement.style.position = 'absolute';
      renderer.domElement.style.inset = '0';
      threeContainer.appendChild(renderer.domElement);

      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera(50, stage.clientWidth / stage.clientHeight, 0.1, 2000);
      camera.position.set(0,0,6);

      const hemi = new THREE.HemisphereLight(0xffffff, 0x222222, 0.4);
      scene.add(hemi);
      const dir = new THREE.DirectionalLight(0xffffff, 1);
      dir.position.set(5,2,5);
      scene.add(dir);

      controls = new THREE.OrbitControls(camera, renderer.domElement);
      controls.enableDamping = true;
      controls.enablePan = false;
      controls.minDistance = 1.2;
      controls.maxDistance = 20;

      window.addEventListener('resize', onThreeResize);
      animateThree();
    }

    function onThreeResize(){ if(!renderer) return; renderer.setSize(stage.clientWidth, stage.clientHeight); camera.aspect = stage.clientWidth/stage.clientHeight; camera.updateProjectionMatrix(); }

    function animateThree(){ if(!renderer) return; requestAnimationFrame(animateThree); if(controls) controls.update(); if(planetMesh) planetMesh.rotation.y += 0.002; renderer.render(scene, camera); }

    function disposeThree(){ try{ if(renderer && renderer.domElement && threeContainer.contains(renderer.domElement)) threeContainer.removeChild(renderer.domElement); }catch(e){}; try{ renderer.dispose(); }catch(e){}; renderer=null; scene=null; camera=null; controls=null; planetMesh=null; }

    function easeInOutCubic(t){ return t<0.5 ? 4*t*t*t : 1 - Math.pow(-2*t+2,3)/2; }

    function flyTo(targetPos=[0,0,0], targetDistance=3, duration=900){
      return new Promise(res=>{
        const startPos = camera.position.clone();
        const endPos = new THREE.Vector3(targetPos[0], targetPos[1], targetDistance);
        const startTime = performance.now();
        function frame(now){
          const t = Math.min(1, (now - startTime)/duration);
          camera.position.lerpVectors(startPos, endPos, easeInOutCubic(t));
          camera.lookAt(new THREE.Vector3(...targetPos));
          if(t<1) requestAnimationFrame(frame); else res();
        }
        requestAnimationFrame(frame);
      });
    }

    async function showPlanet3D(p){
      const name = p.name;
      document.getElementById('hud-planet').textContent = name;
      loaderEl.style.display = 'block';
      if(!renderer) createThreeRenderer();
      threeContainer.style.display = 'block'; threeContainer.classList.add('show-3d');
      document.getElementById('back3d').style.display = 'inline-block';

      // limpiar escena
      while(scene.children.length) scene.remove(scene.children[0]);
      const hemi = new THREE.HemisphereLight(0xffffff, 0x222222, 0.4); scene.add(hemi);
      const dir = new THREE.DirectionalLight(0xffffff, 1); dir.position.set(5,2,5); scene.add(dir);

      const geom = new THREE.SphereGeometry(1, 64, 64);
      const texURL = textureMap[name];
      let material;
      try{
        const tex = await loadTextureAsync(texURL);
        if(tex){ material = new THREE.MeshStandardMaterial({map:tex, metalness:0, roughness:1}); }
        else { material = new THREE.MeshStandardMaterial({color: hexToThreeColor(p.color || '#888888')}); }
      }catch(err){ console.warn('Error cargando textura', err); material = new THREE.MeshStandardMaterial({color: hexToThreeColor(p.color || '#888888')}); }

      planetMesh = new THREE.Mesh(geom, material);
      scene.add(planetMesh);

      // capa de nubes para la Tierra
      if(name==='Tierra'){
        try{
          const cloudTex = await loadTextureAsync('https://www.solarsystemscope.com/textures/download/2k_earth_clouds.jpg');
          if(cloudTex){ const cloudMat = new THREE.MeshStandardMaterial({map:cloudTex, transparent:true, opacity:0.8, depthWrite:false}); const cloudMesh = new THREE.Mesh(new THREE.SphereGeometry(1.01,64,64), cloudMat); scene.add(cloudMesh); (function animateClouds(){ if(!cloudMesh) return; cloudMesh.rotation.y += 0.003; requestAnimationFrame(animateClouds); })(); }
        }catch(e){}
      }

      camera.position.set(0,0,8); camera.lookAt(planetMesh.position);
      await flyTo([0,0,0], 2.6, 900);
      loaderEl.style.display = 'none';
      threeContainer.style.pointerEvents = 'auto';
    }

    function hexToThreeColor(hex){ try{ return new THREE.Color(hex); }catch(e){ return new THREE.Color(0x888888); } }

    async function onPlanetSelect(p){
      focus = p; document.getElementById('hud-planet').textContent = p.name; showInfo(p);
      await showPlanet3D(p);
    }

    document.getElementById('back3d').addEventListener('click', ()=>{
      threeContainer.style.display = 'none'; threeContainer.classList.remove('show-3d'); document.getElementById('back3d').style.display='none'; loaderEl.style.display='none'; threeContainer.style.pointerEvents='none'; disposeThree();
    });

    // util para debug
    console.log('Simulador corregido: usa Three.js UMD para compatibilidad local. Si hay errores, revisa la consola (F12) y pégame el mensaje.');
  </script>
</body>
</html>